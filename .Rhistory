HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=1000,interaction.depth=4,shrinkage=0.07)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=1000,interaction.depth=4,shrinkage=0.08)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=1000,interaction.depth=4,shrinkage=0.09)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=1000,interaction.depth=4,shrinkage=0.02)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=4,shrinkage=0.02)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=4,shrinkage=0.01)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=4,shrinkage=0.001)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=4,shrinkage=0.005)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=4,shrinkage=0.0005)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=4,shrinkage=0.005)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=4,shrinkage=0.008)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=4,shrinkage=0.009)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=3,shrinkage=0.009)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=2,shrinkage=0.009)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=7,shrinkage=0.009)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=9,shrinkage=0.009)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
acc_boost
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=9,shrinkage=0.009)
HD_boost_pred =  predict(HD_boost,test_data,type="response")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("train.csv")
test_set <- read.csv("test.csv")
head(data)
str(data)
data$Sex <- factor(data$Sex, levels = c("F","M"), labels = c(0,1))
data$ChestPainType <- factor(data$ChestPainType, levels = c("NAP","ASY","TA","ATA"), labels = c(0,1,2,3))
data$RestingECG <- factor(data$RestingECG, levels = c("Normal","ST","LVH"), labels = c(0,1,2))
data$ExerciseAngina <- factor(data$ExerciseAngina, levels = c("N","Y"), labels = c(0,1))
data$ST_Slope <- factor(data$ST_Slope, levels = c("Flat","Up","Down"), labels = c(0,1,2))
data$Sex <- as.numeric(data$Sex)
data$ChestPainType <- as.numeric(data$ChestPainType)
data$RestingECG <- as.numeric(data$RestingECG)
data$ExerciseAngina <- as.numeric(data$ExerciseAngina)
data$ST_Slope <- as.numeric(data$ST_Slope)
data
str(data)
test_set$Sex <- factor(test_set$Sex, levels = c("F","M"), labels = c(0,1))
test_set$ChestPainType <- factor(test_set$ChestPainType, levels = c("NAP","ASY","TA","ATA"), labels = c(0,1,2,3))
test_set$RestingECG <- factor(test_set$RestingECG, levels = c("Normal","ST","LVH"), labels = c(0,1,2))
test_set$ExerciseAngina <- factor(test_set$ExerciseAngina, levels = c("N","Y"), labels = c(0,1))
test_set$ST_Slope <- factor(test_set$ST_Slope, levels = c("Flat","Up","Down"), labels = c(0,1,2))
test_set$Sex <- as.numeric(test_set$Sex)
test_set$ChestPainType <- as.numeric(test_set$ChestPainType)
test_set$RestingECG <- as.numeric(test_set$RestingECG)
test_set$ExerciseAngina <- as.numeric(test_set$ExerciseAngina)
test_set$ST_Slope <- as.numeric(test_set$ST_Slope)
test_set
str(test_set)
require(caTools)
set.seed(0)
split = sample.split(data$HeartDisease, SplitRatio = 0.8)
training = subset(data, split == TRUE)
testing = subset(data, split == FALSE)
dim(training)
dim(testing)
training[,1:11] = scale(training[,1:11])
testing[,1:11] = scale(testing[,1:11])
test_set[,] = scale(test_set[,])
#ExerciseAngina + Oldpeak + ST_Slope + MaxHR + Sex + FastingBS + Cholesterol
#test_data$Age = scale(test_data$Age)
#test$Age = scale(test$Age)
#training_data$RestingBP = scale(training_data$RestingBP)
#test_data$RestingBP = scale(test_data$RestingBP)
#test$RestingBP = scale(test$RestingBP)
#training_data$Cholesterol = scale(training_data$Cholesterol)
#test_data$Cholesterol = scale(test_data$Cholesterol)
#test$Cholesterol = scale(test$Cholesterol)
#training_data$MaxHR = scale(training_data$MaxHR)
#test_data$MaxHR = scale(test_data$MaxHR)
#test$MaxHR = scale(test$MaxHR)
#training_data$Oldpeak = scale(training_data$Oldpeak)
#test_data$Oldpeak = scale(test_data$Oldpeak)
#test$Oldpeak = scale(test$Oldpeak)
Predict_Accuracy <- function(actual, predicted)
{
acc = 0
for (i in 1 : length(actual))
{
binPredictted = FALSE
if(round(predicted[i], digits = 0) == 0)
{
binPredictted = FALSE
}
else
{
binPredictted = TRUE
}
if (actual[i] == binPredictted)
{
acc = acc + 1
}
}
return(acc/length(actual))
}
calc_acc=function(predicted,actual)
{
mean(predicted==actual)
}
#str(data)
#library(corrplot)
#corrs <- round(cor(training),2)
#corrs
#corrplot.mixed(corrs,lower = 'shade', upper = 'pie', order = 'hclust')
model1 <- glm(HeartDisease ~., family = binomial, data = training)
summary(model1)
model2 <- glm(HeartDisease ~ ExerciseAngina + Oldpeak + ST_Slope + MaxHR + Sex + FastingBS + Cholesterol ,family = binomial, data = training)
summary(model2)
dim(test_set)
prediction1 <- predict(model1, testing, type = "response")
prediction2 <- predict(model2, test_set, type = "response")
predictionfinal1 <- ifelse(prediction1 > 0.5, 1,0)
predictionfinal2 <- ifelse(prediction2 > 0.5, 1,0)
#predictionfinal1
#predictionfinal2
calc_acc(predictionfinal1, testing$HeartDisease)
#calc_acc(predictionfinal2, testing$HeartDisease)
library(randomForest)
bagging <- randomForest(HeartDisease ~ ., training, mtry = 11, importance = TRUE, ntrees = 500)
bagging
bagging_pred = predict(bagging,testing,type="class")
calc_acc(bagging_pred,testing$HeartDisease)
modelerf=randomForest(HeartDisease~ .,data=training,mtry=3,importance= TRUE,ntrees=500)
modelerf
modelerf_pred=predict(modelerf,testing,type="class")
calc_acc(modelerf_pred,testing$HeartDisease)
library(gbm)
temp = 0
bestmodel = 0
for (i in 500:3000)
{
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=i,interaction.depth=4,shrinkage=0.01)
HD_boost_pred =  predict(HD_boost,testing,type="response")
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)
if(bestmodel <= acc_boost)
{
bestmodel = acc_boost
temp = i
}
}
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("train.csv")
test_set <- read.csv("test.csv")
head(data)
str(data)
data$Sex <- factor(data$Sex, levels = c("F","M"), labels = c(0,1))
data$ChestPainType <- factor(data$ChestPainType, levels = c("NAP","ASY","TA","ATA"), labels = c(0,1,2,3))
data$RestingECG <- factor(data$RestingECG, levels = c("Normal","ST","LVH"), labels = c(0,1,2))
data$ExerciseAngina <- factor(data$ExerciseAngina, levels = c("N","Y"), labels = c(0,1))
data$ST_Slope <- factor(data$ST_Slope, levels = c("Flat","Up","Down"), labels = c(0,1,2))
data$Sex <- as.numeric(data$Sex)
data$ChestPainType <- as.numeric(data$ChestPainType)
data$RestingECG <- as.numeric(data$RestingECG)
data$ExerciseAngina <- as.numeric(data$ExerciseAngina)
data$ST_Slope <- as.numeric(data$ST_Slope)
data
str(data)
test_set$Sex <- factor(test_set$Sex, levels = c("F","M"), labels = c(0,1))
test_set$ChestPainType <- factor(test_set$ChestPainType, levels = c("NAP","ASY","TA","ATA"), labels = c(0,1,2,3))
test_set$RestingECG <- factor(test_set$RestingECG, levels = c("Normal","ST","LVH"), labels = c(0,1,2))
test_set$ExerciseAngina <- factor(test_set$ExerciseAngina, levels = c("N","Y"), labels = c(0,1))
test_set$ST_Slope <- factor(test_set$ST_Slope, levels = c("Flat","Up","Down"), labels = c(0,1,2))
test_set$Sex <- as.numeric(test_set$Sex)
test_set$ChestPainType <- as.numeric(test_set$ChestPainType)
test_set$RestingECG <- as.numeric(test_set$RestingECG)
test_set$ExerciseAngina <- as.numeric(test_set$ExerciseAngina)
test_set$ST_Slope <- as.numeric(test_set$ST_Slope)
test_set
str(test_set)
require(caTools)
set.seed(0)
split = sample.split(data$HeartDisease, SplitRatio = 0.8)
training = subset(data, split == TRUE)
testing = subset(data, split == FALSE)
dim(training)
dim(testing)
training[,1:11] = scale(training[,1:11])
testing[,1:11] = scale(testing[,1:11])
test_set[,] = scale(test_set[,])
#ExerciseAngina + Oldpeak + ST_Slope + MaxHR + Sex + FastingBS + Cholesterol
#test_data$Age = scale(test_data$Age)
#test$Age = scale(test$Age)
#training_data$RestingBP = scale(training_data$RestingBP)
#test_data$RestingBP = scale(test_data$RestingBP)
#test$RestingBP = scale(test$RestingBP)
#training_data$Cholesterol = scale(training_data$Cholesterol)
#test_data$Cholesterol = scale(test_data$Cholesterol)
#test$Cholesterol = scale(test$Cholesterol)
#training_data$MaxHR = scale(training_data$MaxHR)
#test_data$MaxHR = scale(test_data$MaxHR)
#test$MaxHR = scale(test$MaxHR)
#training_data$Oldpeak = scale(training_data$Oldpeak)
#test_data$Oldpeak = scale(test_data$Oldpeak)
#test$Oldpeak = scale(test$Oldpeak)
Predict_Accuracy <- function(actual, predicted)
{
acc = 0
for (i in 1 : length(actual))
{
binPredictted = FALSE
if(round(predicted[i], digits = 0) == 0)
{
binPredictted = FALSE
}
else
{
binPredictted = TRUE
}
if (actual[i] == binPredictted)
{
acc = acc + 1
}
}
return(acc/length(actual))
}
calc_acc=function(predicted,actual)
{
mean(predicted==actual)
}
#str(data)
#library(corrplot)
#corrs <- round(cor(training),2)
#corrs
#corrplot.mixed(corrs,lower = 'shade', upper = 'pie', order = 'hclust')
model1 <- glm(HeartDisease ~., family = binomial, data = training)
summary(model1)
model2 <- glm(HeartDisease ~ ExerciseAngina + Oldpeak + ST_Slope + MaxHR + Sex + FastingBS + Cholesterol ,family = binomial, data = training)
summary(model2)
dim(test_set)
prediction1 <- predict(model1, testing, type = "response")
prediction2 <- predict(model2, test_set, type = "response")
predictionfinal1 <- ifelse(prediction1 > 0.5, 1,0)
predictionfinal2 <- ifelse(prediction2 > 0.5, 1,0)
#predictionfinal1
#predictionfinal2
calc_acc(predictionfinal1, testing$HeartDisease)
#calc_acc(predictionfinal2, testing$HeartDisease)
library(randomForest)
bagging <- randomForest(HeartDisease ~ ., training, mtry = 11, importance = TRUE, ntrees = 500)
bagging
bagging_pred = predict(bagging,testing,type="class")
calc_acc(bagging_pred,testing$HeartDisease)
modelerf=randomForest(HeartDisease~ .,data=training,mtry=3,importance= TRUE,ntrees=500)
modelerf
modelerf_pred=predict(modelerf,testing,type="class")
calc_acc(modelerf_pred,testing$HeartDisease)
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=9,shrinkage=0.009)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("train.csv")
test_set <- read.csv("test.csv")
head(data)
str(data)
data$Sex <- factor(data$Sex, levels = c("F","M"), labels = c(0,1))
data$ChestPainType <- factor(data$ChestPainType, levels = c("NAP","ASY","TA","ATA"), labels = c(0,1,2,3))
data$RestingECG <- factor(data$RestingECG, levels = c("Normal","ST","LVH"), labels = c(0,1,2))
data$ExerciseAngina <- factor(data$ExerciseAngina, levels = c("N","Y"), labels = c(0,1))
data$ST_Slope <- factor(data$ST_Slope, levels = c("Flat","Up","Down"), labels = c(0,1,2))
data$Sex <- as.numeric(data$Sex)
data$ChestPainType <- as.numeric(data$ChestPainType)
data$RestingECG <- as.numeric(data$RestingECG)
data$ExerciseAngina <- as.numeric(data$ExerciseAngina)
data$ST_Slope <- as.numeric(data$ST_Slope)
data
str(data)
test_set$Sex <- factor(test_set$Sex, levels = c("F","M"), labels = c(0,1))
test_set$ChestPainType <- factor(test_set$ChestPainType, levels = c("NAP","ASY","TA","ATA"), labels = c(0,1,2,3))
test_set$RestingECG <- factor(test_set$RestingECG, levels = c("Normal","ST","LVH"), labels = c(0,1,2))
test_set$ExerciseAngina <- factor(test_set$ExerciseAngina, levels = c("N","Y"), labels = c(0,1))
test_set$ST_Slope <- factor(test_set$ST_Slope, levels = c("Flat","Up","Down"), labels = c(0,1,2))
test_set$Sex <- as.numeric(test_set$Sex)
test_set$ChestPainType <- as.numeric(test_set$ChestPainType)
test_set$RestingECG <- as.numeric(test_set$RestingECG)
test_set$ExerciseAngina <- as.numeric(test_set$ExerciseAngina)
test_set$ST_Slope <- as.numeric(test_set$ST_Slope)
test_set
str(test_set)
require(caTools)
set.seed(0)
split = sample.split(data$HeartDisease, SplitRatio = 0.8)
training = subset(data, split == TRUE)
testing = subset(data, split == FALSE)
dim(training)
dim(testing)
training[,1:11] = scale(training[,1:11])
testing[,1:11] = scale(testing[,1:11])
test_set[,] = scale(test_set[,])
#ExerciseAngina + Oldpeak + ST_Slope + MaxHR + Sex + FastingBS + Cholesterol
#test_data$Age = scale(test_data$Age)
#test$Age = scale(test$Age)
#training_data$RestingBP = scale(training_data$RestingBP)
#test_data$RestingBP = scale(test_data$RestingBP)
#test$RestingBP = scale(test$RestingBP)
#training_data$Cholesterol = scale(training_data$Cholesterol)
#test_data$Cholesterol = scale(test_data$Cholesterol)
#test$Cholesterol = scale(test$Cholesterol)
#training_data$MaxHR = scale(training_data$MaxHR)
#test_data$MaxHR = scale(test_data$MaxHR)
#test$MaxHR = scale(test$MaxHR)
#training_data$Oldpeak = scale(training_data$Oldpeak)
#test_data$Oldpeak = scale(test_data$Oldpeak)
#test$Oldpeak = scale(test$Oldpeak)
Predict_Accuracy <- function(actual, predicted)
{
acc = 0
for (i in 1 : length(actual))
{
binPredictted = FALSE
if(round(predicted[i], digits = 0) == 0)
{
binPredictted = FALSE
}
else
{
binPredictted = TRUE
}
if (actual[i] == binPredictted)
{
acc = acc + 1
}
}
return(acc/length(actual))
}
calc_acc=function(predicted,actual)
{
mean(predicted==actual)
}
#str(data)
#library(corrplot)
#corrs <- round(cor(training),2)
#corrs
#corrplot.mixed(corrs,lower = 'shade', upper = 'pie', order = 'hclust')
model1 <- glm(HeartDisease ~., family = binomial, data = training)
summary(model1)
model2 <- glm(HeartDisease ~ ExerciseAngina + Oldpeak + ST_Slope + MaxHR + Sex + FastingBS + Cholesterol ,family = binomial, data = training)
summary(model2)
dim(test_set)
prediction1 <- predict(model1, testing, type = "response")
prediction2 <- predict(model2, test_set, type = "response")
predictionfinal1 <- ifelse(prediction1 > 0.5, 1,0)
predictionfinal2 <- ifelse(prediction2 > 0.5, 1,0)
#predictionfinal1
#predictionfinal2
calc_acc(predictionfinal1, testing$HeartDisease)
#calc_acc(predictionfinal2, testing$HeartDisease)
library(randomForest)
bagging <- randomForest(HeartDisease ~ ., training, mtry = 11, importance = TRUE, ntrees = 500)
bagging
bagging_pred = predict(bagging,testing,type="class")
calc_acc(bagging_pred,testing$HeartDisease)
modelerf=randomForest(HeartDisease~ .,data=training,mtry=3,importance= TRUE,ntrees=500)
modelerf
modelerf_pred=predict(modelerf,testing,type="class")
calc_acc(modelerf_pred,testing$HeartDisease)
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=9,shrinkage=0.009)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("train.csv")
test_set <- read.csv("test.csv")
head(data)
str(data)
data$Sex <- factor(data$Sex, levels = c("F","M"), labels = c(0,1))
data$ChestPainType <- factor(data$ChestPainType, levels = c("NAP","ASY","TA","ATA"), labels = c(0,1,2,3))
data$RestingECG <- factor(data$RestingECG, levels = c("Normal","ST","LVH"), labels = c(0,1,2))
data$ExerciseAngina <- factor(data$ExerciseAngina, levels = c("N","Y"), labels = c(0,1))
data$ST_Slope <- factor(data$ST_Slope, levels = c("Flat","Up","Down"), labels = c(0,1,2))
data$Sex <- as.numeric(data$Sex)
data$ChestPainType <- as.numeric(data$ChestPainType)
data$RestingECG <- as.numeric(data$RestingECG)
data$ExerciseAngina <- as.numeric(data$ExerciseAngina)
data$ST_Slope <- as.numeric(data$ST_Slope)
#data
str(data)
test_set$Sex <- factor(test_set$Sex, levels = c("F","M"), labels = c(0,1))
test_set$ChestPainType <- factor(test_set$ChestPainType, levels = c("NAP","ASY","TA","ATA"), labels = c(0,1,2,3))
test_set$RestingECG <- factor(test_set$RestingECG, levels = c("Normal","ST","LVH"), labels = c(0,1,2))
test_set$ExerciseAngina <- factor(test_set$ExerciseAngina, levels = c("N","Y"), labels = c(0,1))
test_set$ST_Slope <- factor(test_set$ST_Slope, levels = c("Flat","Up","Down"), labels = c(0,1,2))
test_set$Sex <- as.numeric(test_set$Sex)
test_set$ChestPainType <- as.numeric(test_set$ChestPainType)
test_set$RestingECG <- as.numeric(test_set$RestingECG)
test_set$ExerciseAngina <- as.numeric(test_set$ExerciseAngina)
test_set$ST_Slope <- as.numeric(test_set$ST_Slope)
#test_set
str(test_set)
require(caTools)
set.seed(0)  #valeur à changer tu va comprendre à la fin
split = sample.split(data$HeartDisease, SplitRatio = 0.8)
training = subset(data, split == TRUE)
testing = subset(data, split == FALSE)
#dim(training)
#dim(testing)
training[,1:11] = scale(training[,1:11])
testing[,1:11] = scale(testing[,1:11])
test_set[,] = scale(test_set[,])
calc_acc=function(predicted,actual)
{
mean(predicted==actual)
}
#library(corrplot)
#corrs <- round(cor(training),2)
#corrplot.mixed(corrs,lower = 'shade', upper = 'pie', order = 'hclust')
model1 <- glm(HeartDisease ~., family = binomial, data = training)
summary(model1)
model2 <- glm(HeartDisease ~ ExerciseAngina + Oldpeak + ST_Slope + MaxHR + Sex + FastingBS + Cholesterol ,family = binomial, data = training)
summary(model2)
prediction1 <- predict(model1, testing, type = "response")
prediction2 <- predict(model2, test_set, type = "response")
#ici d'abors j'ai mis teststing a la place de test_set pour voir l'accuracy j'ai vu que  c'etait le meilleur donc je l'ai implementé dans test_set
predictionfinal1 <- ifelse(prediction1 > 0.5, 1,0)
predictionfinal2 <- ifelse(prediction2 > 0.5, 1,0)
# puis ecrit dans une csv que j'ai soumis (la methode sera tt en bas) car la RLM donne au max 84% pas ouf (j'envoie predictionfinal2 car c'est un fichier de 0 et de 1)
#predictionfinal1
#predictionfinal2
calc_acc(predictionfinal1, testing$HeartDisease)
#calc_acc(predictionfinal2, testing$HeartDisease)
library(randomForest)
bagging <- randomForest(HeartDisease ~ ., training, mtry = 11, importance = TRUE, ntrees = 500)
bagging
bagging_pred = predict(bagging,testing,type="class")
calc_acc(bagging_pred,testing$HeartDisease)
# ici je ne le transforme meme pas en 0 et 1 car la moyenne est nul. On passe a la suite
modelerf=randomForest(HeartDisease~ .,data=training,mtry=3,importance= TRUE,ntrees=500)
modelerf_pred=predict(modelerf,testing,type="class")
calc_acc(modelerf_pred,testing$HeartDisease)
#Pareil que RF, moyenne nul je prend meme pas la peine de le transoformer en 0 1 et a submit
library(gbm)
#HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=5000,interaction.depth=4,shrinkage=0.01)
# Truc de base
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=9,shrinkage=0.009)
HD_boost_pred =  predict(HD_boost,testing,type="response")
# Comme tt a l'heure pour calculer la moyenne je met testing mais la je change en test_set pour implémenter mon model dans les fichier le vrai test et non celui du split (c'est comme en A3 avec le knn quand on avait plusieurs data)
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
#C'est ca que j'ecris dans un csv et que je submit
#acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)   #calcule moyenne
#acc_boost
to_be_submitted = data.frame(id=rownames(test_set), HeartDisease = HD_boost_pred01)
library(gbm)
#HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=5000,interaction.depth=4,shrinkage=0.01)
# Truc de base
HD_boost=gbm(HeartDisease ~.,data=training,distribution="bernoulli",n.trees=800,interaction.depth=9,shrinkage=0.009)
HD_boost_pred =  predict(HD_boost,testing,type="response")
# Comme tt a l'heure pour calculer la moyenne je met testing mais la je change en test_set pour implémenter mon model dans les fichier le vrai test et non celui du split (c'est comme en A3 avec le knn quand on avait plusieurs data)
HD_boost_pred01 = ifelse(HD_boost_pred >= 0.5, 1,0)
#C'est ca que j'ecris dans un csv et que je submit
acc_boost = calc_acc(HD_boost_pred01, testing$HeartDisease)   #calcule moyenne
acc_boost
